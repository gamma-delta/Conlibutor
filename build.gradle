plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

version = projectVersion
group = "at.petra-k.${projectName}"
archivesBaseName = projectName

def isRelease = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        def gitHash = System.getenv('GIT_COMMIT')
        def gitPrevHash = System.getenv('GIT_PREVIOUS_COMMIT')
        def travisRange = System.getenv('TRAVIS_COMMIT_RANGE')
        if (gitHash && gitPrevHash) {
            exec {
                commandLine 'git', 'log', '--pretty=tformat:- %s', '' + gitPrevHash + '...' + gitHash
                standardOutput = stdout
            }
            return stdout.toString().toLowerCase().contains("[release")
        } else if (travisRange) {
            exec {
                commandLine 'git', 'log', '--pretty=tformat:- %s', '' + travisRange
                standardOutput = stdout
            }
            return stdout.toString().toLowerCase().contains("[release")
        } else {
            return false
        }
    } catch (ignored) {
        return false
    }
}

if (!isRelease() && System.getenv('BUILD_NUMBER') != null) {
    version += "-prerelease-" + System.getenv('BUILD_NUMBER')
} else if (System.getenv('TAG_NAME') != null) {
    version = System.getenv('TAG_NAME').substring(1)
    println 'Version overridden to tag version ' + version
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"


repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'org.slf4j:slf4j-api:1.8.0-beta4'
    runtimeOnly 'org.slf4j:slf4j-simple:1.8.0-beta4'

    implementation 'com.electronwill.night-config:toml:3.6.5'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : projectName,
                "Specification-Vendor"    : "petra-kat",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "petra-kat",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    dependencies {
        exclude 'org.jetbrains:annotations:20.1.0', 'org.slf4j:slf4j-api:1.8.0-beta4'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            pom.withXml {
                asNode().dependencies.dependency.each { dep ->
                    assert dep.parent().remove(dep)
                }
            }
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}


test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
